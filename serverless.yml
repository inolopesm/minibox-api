service: minibox-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  httpApi:
    cors:
      allowedOrigins: [ '*' ]
      allowedHeaders: [ '*' ]
      allowedMethods: [ '*' ]

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-domain-manager

package:
  patterns:
    - '!src/infrastructure/migrations/**'
    - '!src/**/*.spec.js'
    - '!src/**/*.test.js'
    - '!src/**/*.mock.js'

custom:
  serverlessPluginTypescript:
    tsConfigFileLocation: ./tsconfig.build.json
  customDomain:
    domainName: api.minibox.inolopesm.com
    endpointType: regional
    apiType: http

functions:
  api:
    handler: src/main.handler
    events: [ httpApi: GET / ]
  createSession:
    handler: src/main.createSession
    events: [ httpApi: POST /sessions ]
  createUser:
    handler: src/main.createUser
    events: [ httpApi: POST /users ]
  findProducts:
    handler: src/main.findProducts
    events: [ httpApi: GET /products ]
  findOneProduct:
    handler: src/main.findOneProduct
    events: [ httpApi: 'GET /products/{productId}' ]
  createProduct:
    handler: src/main.createProduct
    events: [ httpApi: POST /products ]
  updateProduct:
    handler: src/main.updateProduct
    events: [ httpApi: 'PUT /products/{productId}' ]
  findTeams:
    handler: src/main.findTeams
    events: [ httpApi: GET /teams ]
  findOneTeam:
    handler: src/main.findOneTeam
    events: [ httpApi: 'GET /teams/{teamId}' ]
  createTeam:
    handler: src/main.createTeam
    events: [ httpApi: POST /teams ]
  updateTeam:
    handler: src/main.updateTeam
    events: [ httpApi: 'PUT /teams/{teamId}' ]
  findPeople:
    handler: src/main.findPeople
    events: [ httpApi: GET /people ]
  findOnePerson:
    handler: src/main.findOnePerson
    events: [ httpApi: 'GET /people/{personId}' ]
  createPerson:
    handler: src/main.createPerson
    events: [ httpApi: POST /people ]
  updatePerson:
    handler: src/main.updatePerson
    events: [ httpApi: 'PUT /people/{personId}' ]
  findInvoices:
    handler: src/main.findInvoices
    events: [ httpApi: GET /invoices ]
  findOneInvoice:
    handler: src/main.findOneInvoice
    events: [ httpApi: 'GET /invoices/{invoiceId}' ]
  createInvoice:
    handler: src/main.createInvoice
    events: [ httpApi: POST /invoices ]
  payInvoice:
    handler: src/main.payInvoice
    events: [ httpApi: 'PUT /invoices/{invoiceId}/pay' ]
